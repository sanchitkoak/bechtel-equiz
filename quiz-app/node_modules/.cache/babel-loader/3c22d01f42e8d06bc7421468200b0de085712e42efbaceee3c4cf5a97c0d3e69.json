{"ast":null,"code":"var _jsxFileName = \"/Users/sanchitkoak/Desktop/new projects/quiz-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport questions from \"./questions\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction shuffle(array) {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n}\nexport default function App() {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [questionText, setQuestionText] = useState(\"\");\n  const [choices, setChoices] = useState([]);\n  const [correctAnswer, setCorrectAnswer] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const startQuiz = () => {\n    setCurrentQuestionIndex(0);\n    setScore(0);\n    setShowNextButton(false);\n    showQuestion(0);\n  };\n  const showQuestion = index => {\n    resetState();\n    let currentQuestion = questions[index];\n    let questionNumber = index + 1;\n    setQuestionText(`${questionNumber}. ${currentQuestion.question}`);\n    const shuffledChoices = shuffle(currentQuestion.choices);\n    setChoices(shuffledChoices);\n    setCorrectAnswer(currentQuestion.choices.findIndex(choice => choice.answer === true));\n  };\n  const resetState = () => {\n    setChoices([]);\n    setCorrectAnswer(null);\n    setSelectedAnswer(null);\n  };\n  const selectChoice = (isCorrect, index) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n    setSelectedAnswer(index);\n    setShowNextButton(true);\n  };\n  const handleNextButton = () => {\n    setShowNextButton(false);\n    setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n    if (currentQuestionIndex < questions.length - 1) {\n      showQuestion(currentQuestionIndex + 1);\n    } else {\n      // If it's the last question, show the score\n      showScore();\n    }\n  };\n  const showScore = () => {\n    resetState();\n    setQuestionText(`You scored ${score} out of ${questions.length}!`);\n  };\n  useEffect(() => {\n    startQuiz();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Simple Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"question\",\n        children: questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"answer-buttons\",\n        children: choices.map((choice, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `btn ${selectedAnswer === index ? choice.answer ? \"correct\" : \"incorrect\" : \"\"}`,\n          onClick: () => selectChoice(choice.answer, index),\n          \"aria-label\": choice.text,\n          disabled: selectedAnswer !== null,\n          children: choice.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), showNextButton && /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"next-button\",\n        onClick: handleNextButton,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"CuxxWLBvrCXKMNMr2v+45cR1pKU=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","questions","jsxDEV","_jsxDEV","shuffle","array","shuffledArray","i","length","j","Math","floor","random","App","_s","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","questionText","setQuestionText","choices","setChoices","correctAnswer","setCorrectAnswer","selectedAnswer","setSelectedAnswer","showNextButton","setShowNextButton","startQuiz","showQuestion","index","resetState","currentQuestion","questionNumber","question","shuffledChoices","findIndex","choice","answer","selectChoice","isCorrect","handleNextButton","prevIndex","showScore","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","map","onClick","text","disabled","_c","$RefreshReg$"],"sources":["/Users/sanchitkoak/Desktop/new projects/quiz-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport questions from \"./questions\";\nimport \"./styles.css\";\n\nfunction shuffle(array) {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n}\n\nexport default function App() {\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [questionText, setQuestionText] = useState(\"\");\n  const [choices, setChoices] = useState([]);\n  const [correctAnswer, setCorrectAnswer] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showNextButton, setShowNextButton] = useState(false);\n\n  const startQuiz = () => {\n    setCurrentQuestionIndex(0);\n    setScore(0);\n    setShowNextButton(false);\n    showQuestion(0);\n  };\n\n  const showQuestion = (index) => {\n    resetState();\n    let currentQuestion = questions[index];\n    let questionNumber = index + 1;\n    setQuestionText(`${questionNumber}. ${currentQuestion.question}`);\n    const shuffledChoices = shuffle(currentQuestion.choices);\n    setChoices(shuffledChoices);\n    setCorrectAnswer(currentQuestion.choices.findIndex((choice) => choice.answer === true));\n  };  \n\n  const resetState = () => {\n    setChoices([]);\n    setCorrectAnswer(null);\n    setSelectedAnswer(null);\n  };\n\n  const selectChoice = (isCorrect, index) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    setSelectedAnswer(index);\n    setShowNextButton(true);\n  };\n\n  const handleNextButton = () => {\n    setShowNextButton(false);\n    setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\n\n    if (currentQuestionIndex < questions.length - 1) {\n      showQuestion(currentQuestionIndex + 1);\n    } else {\n      // If it's the last question, show the score\n      showScore();\n    }\n  };\n\n  const showScore = () => {\n    resetState();\n    setQuestionText(`You scored ${score} out of ${questions.length}!`);\n  };\n\n  useEffect(() => {\n    startQuiz();\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <h1>Simple Quiz</h1>\n      <div className=\"quiz\">\n        <h2 id=\"question\">{questionText}</h2>\n        <div id=\"answer-buttons\">\n          {choices.map((choice, index) => (\n            <button\n              key={index}\n              className={`btn ${selectedAnswer === index ? (choice.answer ? \"correct\" : \"incorrect\") : \"\"}`}\n              onClick={() => selectChoice(choice.answer, index)}\n              aria-label={choice.text}\n              disabled={selectedAnswer !== null}\n            >\n              {choice.text}\n            </button>\n          ))}\n        </div>\n        { showNextButton && (\n          <button id=\"next-button\" onClick={handleNextButton}>\n            Next\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}